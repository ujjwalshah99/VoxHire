-- Complete Database Schema for AI Interview Platform

-- 1. Users table (for custom user data)
create table public.Users (
  id uuid primary key default gen_random_uuid(),
  name text,
  email text unique not null,
  created_at timestamp with time zone default timezone('utc'::text, now()),
  credits integer default 10,
  subscription_tier text default 'free',
  subscription_expires_at timestamp with time zone
);

-- 2. UserProfiles table (for bio and profile settings)
create table public.UserProfiles (
  id bigint generated by default as identity primary key,
  userEmail text not null unique,
  bio text,
  skills jsonb default '[]'::jsonb,
  achievements jsonb default '[]'::jsonb,
  preferences jsonb default '{}'::jsonb,
  avatar_url text,
  linkedin_url text,
  github_url text,
  created_at timestamp with time zone default timezone('utc'::text, now()),
  updated_at timestamp with time zone default timezone('utc'::text, now())
);

-- 3. Interviews table (for interview metadata and questions)
create table public.Interviews (
  id bigint generated by default as identity primary key,
  interview_id uuid not null unique default gen_random_uuid(),
  userEmail text not null,
  jobPosition text not null,
  jobDescription text,
  duration integer not null,
  difficultyLevel text not null,
  questionList jsonb not null,
  questionTypes jsonb not null,
  status text default 'pending',
  feedback jsonb,
  scheduled_for timestamp with time zone,
  timezone text default 'UTC',
  reminder_enabled boolean default true,
  completed_at timestamp with time zone,
  created_at timestamp with time zone default timezone('utc'::text, now()),
  updated_at timestamp with time zone default timezone('utc'::text, now())
);

-- 4. InterviewAnalytics table (for overall analytics and AI feedback)
create table public.InterviewAnalytics (
  id bigint generated by default as identity primary key,
  interview_id uuid not null references public.Interviews(interview_id) on delete cascade,
  userEmail text not null,
  overall_score integer,
  feedback_summary text,
  strengths jsonb,
  improvements jsonb,
  created_at timestamp with time zone default timezone('utc'::text, now())
);

-- 5. PerformanceAnalytics table (for detailed questions and answers with AI analysis)
create table public.PerformanceAnalytics (
  id bigint generated by default as identity primary key,
  interview_id uuid not null references public.Interviews(interview_id) on delete cascade,
  userEmail text not null,
  questions jsonb not null,
  answers jsonb not null,
  -- AI Performance Analysis
  technical_score integer default 0,
  communication_score integer default 0,
  problem_solving_score integer default 0,
  confidence_score integer default 0,
  -- Detailed Feedback
  strengths jsonb default '[]'::jsonb,
  improvements jsonb default '[]'::jsonb,
  ai_recommendation text,
  -- Question-level Analysis
  question_scores jsonb default '{}'::jsonb, -- { "q1": 85, "q2": 92, ... }
  response_quality jsonb default '{}'::jsonb, -- { "q1": "excellent", "q2": "good", ... }
  time_taken jsonb default '{}'::jsonb, -- { "q1": 120, "q2": 90, ... } seconds per question
  -- Overall metrics
  total_questions integer default 0,
  questions_answered integer default 0,
  average_response_time integer default 0, -- in seconds
  created_at timestamp with time zone default timezone('utc'::text, now())
);

-- 6. PracticeSessions table (for practice mode sessions)
create table public.PracticeSessions (
  id bigint generated by default as identity primary key,
  session_id uuid not null unique default gen_random_uuid(),
  userEmail text not null,
  category text not null,
  difficulty text not null,
  duration integer not null,
  questions jsonb not null,
  responses jsonb not null,
  score integer,
  feedback text,
  status text default 'completed',
  created_at timestamp with time zone default timezone('utc'::text, now())
);

-- 7. UserSessions table (for tracking user activity)
create table public.UserSessions (
  id bigint generated by default as identity primary key,
  userEmail text not null,
  session_type text not null, -- 'interview' or 'practice'
  session_id uuid not null,
  duration_minutes integer,
  score integer,
  completed_at timestamp with time zone default timezone('utc'::text, now())
);

-- Create indexes for better performance
create index idx_interviews_user_email on public.Interviews(userEmail);
create index idx_interviews_status on public.Interviews(status);
create index idx_interview_analytics_interview_id on public.InterviewAnalytics(interview_id);
create index idx_performance_analytics_interview_id on public.PerformanceAnalytics(interview_id);
create index idx_practice_sessions_user_email on public.PracticeSessions(userEmail);
create index idx_practice_sessions_category on public.PracticeSessions(category);
create index idx_user_sessions_user_email on public.UserSessions(userEmail);
create index idx_user_sessions_session_type on public.UserSessions(session_type);

-- Enable Row Level Security (RLS) for better security
alter table public.Users enable row level security;
alter table public.UserProfiles enable row level security;
alter table public.Interviews enable row level security;
alter table public.InterviewAnalytics enable row level security;
alter table public.PerformanceAnalytics enable row level security;
alter table public.PracticeSessions enable row level security;
alter table public.UserSessions enable row level security;

-- Create RLS policies (users can only access their own data)
create policy "Users can view own profile" on public.Users for select using (auth.uid() = id);
create policy "Users can update own profile" on public.Users for update using (auth.uid() = id);

create policy "Users can view own user profile" on public.UserProfiles for select using (userEmail = auth.jwt() ->> 'email');
create policy "Users can update own user profile" on public.UserProfiles for all using (userEmail = auth.jwt() ->> 'email');

create policy "Users can view own interviews" on public.Interviews for select using (userEmail = auth.jwt() ->> 'email');
create policy "Users can create own interviews" on public.Interviews for insert with check (userEmail = auth.jwt() ->> 'email');
create policy "Users can update own interviews" on public.Interviews for update using (userEmail = auth.jwt() ->> 'email');
create policy "Users can delete own interviews" on public.Interviews for delete using (userEmail = auth.jwt() ->> 'email');

create policy "Users can view own interview analytics" on public.InterviewAnalytics for select using (userEmail = auth.jwt() ->> 'email');
create policy "Users can create own interview analytics" on public.InterviewAnalytics for insert with check (userEmail = auth.jwt() ->> 'email');
create policy "Users can update own interview analytics" on public.InterviewAnalytics for update using (userEmail = auth.jwt() ->> 'email');

create policy "Users can view own performance analytics" on public.PerformanceAnalytics for select using (userEmail = auth.jwt() ->> 'email');
create policy "Users can create own performance analytics" on public.PerformanceAnalytics for insert with check (userEmail = auth.jwt() ->> 'email');
create policy "Users can update own performance analytics" on public.PerformanceAnalytics for update using (userEmail = auth.jwt() ->> 'email');

-- Practice Sessions policies
create policy "Users can view own practice sessions" on public.PracticeSessions for select using (userEmail = auth.jwt() ->> 'email');
create policy "Users can create own practice sessions" on public.PracticeSessions for insert with check (userEmail = auth.jwt() ->> 'email');
create policy "Users can update own practice sessions" on public.PracticeSessions for update using (userEmail = auth.jwt() ->> 'email');
create policy "Users can delete own practice sessions" on public.PracticeSessions for delete using (userEmail = auth.jwt() ->> 'email');

-- User Sessions policies
create policy "Users can view own user sessions" on public.UserSessions for select using (userEmail = auth.jwt() ->> 'email');
create policy "Users can create own user sessions" on public.UserSessions for insert with check (userEmail = auth.jwt() ->> 'email');

-- Database functions for credit management
create or replace function public.update_user_credits(user_email text, credit_change integer)
returns void
language plpgsql
security definer
as $$
begin
  update public.Users 
  set credits = greatest(0, credits + credit_change)
  where email = user_email;
end;
$$;

-- Function to calculate user statistics
create or replace function public.get_user_stats(user_email text)
returns json
language plpgsql
security definer
as $$
declare
  result json;
begin
  with interview_stats as (
    select 
      count(*) as total_interviews,
      count(*) filter (where status = 'completed') as completed_interviews,
      coalesce(sum(duration), 0) as total_practice_time
    from public.Interviews 
    where userEmail = user_email
  ),
  practice_stats as (
    select 
      count(*) as total_practice_sessions,
      coalesce(avg(score), 0) as avg_practice_score,
      coalesce(sum(duration), 0) as total_practice_time_sessions
    from public.PracticeSessions 
    where userEmail = user_email
  ),
  analytics_stats as (
    select 
      coalesce(avg(overall_score), 0) as avg_interview_score
    from public.InterviewAnalytics 
    where userEmail = user_email
  )
  select json_build_object(
    'totalInterviews', i.total_interviews,
    'completedInterviews', i.completed_interviews,
    'totalPracticeSessions', p.total_practice_sessions,
    'totalPracticeTime', i.total_practice_time + p.total_practice_time_sessions,
    'averageInterviewScore', round(a.avg_interview_score),
    'averagePracticeScore', round(p.avg_practice_score)
  ) into result
  from interview_stats i, practice_stats p, analytics_stats a;
  
  return result;
end;
$$;
